<?php

class ClayTemplate{

		//The file path of the template file
	private $templateFilePath;

		//The data to populate the template with
	private $templateData;

	public function __construct(
		$templateFilePath,
		$templateData){
		$this -> templateFilePath = $templateFilePath;
		$this -> setTemplateData($templateData);
	}

	public function setTemplateData($templateData){
		$this -> templateData = $templateData;
	}

	private function getValue($value){
		$parts = explode('.', $value, 2);
		if (count($parts) < 2){
			throw new Exception("Invalid value: ".$value);
		}
		$group = $parts[0];
		$index = $parts[1];
		$finalValue = null;
		switch($group){
			case "property":
			if (isset(
				$this -> templateData [$index]
			)){
				$finalValue =
				$this -> templateData [$index];
			}
			break;
			default:
			throw new Exception(
				"Cannot handle value of type: "
				. $group);
			break;
		}
		return $finalValue;
	}

	private function getValueString($value){
		if ($value == null){
			return 'null';
		}
		else{
			return $value;
		}
	}

	private function strReplaceFirst(
		$find, $replace, $haystack){
		$find = '/'.preg_quote($find, '/').'/';
		return preg_replace($find, $replace, $haystack, 1);
	}

	public function toString(){
		$templateFile = file_get_contents($this -> templateFilePath);
		$amt = 0;
		while ($startPos = strpos($templateFile, '{{')){
			$subString = substr($templateFile, $startPos, strlen($templateFile));
			$endPos = strpos($subString, '}}');
			if (!$endPos){
				throw new Exception('Reached EOF looking for tag "'
					. substr($subString,0,10) .'" - pos ' . (string)$startPos);
				return false;
			}
			//We go 2 in to remove the {{
			$tagData = substr($subString, 2, $endPos - 2);
			$tagComponents = explode(' ', $tagData);
			$tagOperation = $tagComponents[0];
			if ($tagOperation == "echo"){
				//Replace the full string
				array_shift($tagComponents);
				$templateFile =$this -> strReplaceFirst(
					"{{" . $tagData . "}}",
					$this -> getValueString(
						$this -> getValue(
							implode(' ', $tagComponents)
						)
					),
					$templateFile);
			}
			elseif($tagOperation == "if"){
				$referenceToCheck = $tagComponents[1];
				$valueToCheck = $this -> getValue($referenceToCheck);
				$conditionToCheck = $tagComponents[2];
				$isPassed = false;
				switch($conditionToCheck){
					case "isTrue":
					$isPassed = ($valueToCheck == true);
					break;
					case "isFalse":
					$isPassed = ($valueToCheck == false);
					break;
					case "isNotNull":
					$isPassed = ($valueToCheck != null);
					break;
					default:
					throw new Exception("Unknown condition "
						. $conditionToCheck);
					break;
				}
				if ($isPassed != true){
					//Delete the if block
					$endOfIfBlock = strpos($subString, "{{/if}}");
					$templateFile = substr($templateFile, 0, $startPos)
					. substr($templateFile, $startPos + $endOfIfBlock + 7);
				}
				else{
					//Delete only the if tags
					$templateFile = $this -> strReplaceFirst(
						"{{" . $tagData . "}}",
						"",
						$templateFile,
						1);
					$templateFile = $this -> strReplaceFirst(
						"{{/if}}",
						"",
						$templateFile,
						1);
				}
			}
			elseif($tagOperation == "include"){
				array_shift($tagComponents);
				$path = explode('/',
					str_replace('\\', '/', realpath($this -> templateFilePath))
				);
				array_pop($path);
				$fileToInclude =
				implode('/',$path) . '/'
				. implode(' ', $tagComponents);
				if (file_exists($fileToInclude) == false){
					throw new
					Exception(
						"Clay include, file not found: "
						. $fileToInclude);
				}
				// Includes are Clay files too
				// Build the clay to include
				$fileToIncludeBuilder =
				ClayTemplate::newBuilder()
				->setTemplateFilePath($fileToInclude);
				foreach($this -> templateData
					as $index => $value){
					$fileToIncludeBuilder
					-> addProperty($index, $value);
				}
				$fileToIncludeString =
				$fileToIncludeBuilder
				->build()
				->toString();
				// Replace the clay include tag with our file
				$templateFile = $this -> strReplaceFirst(
					"{{" . $tagData . "}}",
					$fileToIncludeString,
					$templateFile);
			}
			elseif($tagOperation == "signature"){
				$signatureType = $tagComponents[1];
				$signatureString = null;
				if ($signatureType == "html"){
					$signatureString =
					"<!-- Page generated by Clay v1 Templating Engine - Copyright ethan.pm 2017 -->";
				}
				elseif($signatureType== "css" or $signatureType == "js"){
					$signatureString =
					"/* Page generated by Clay v1 Templating Engine - Copyright ethan.pm 2017 */";
				}
				else{
					throw new Exception(
						"Unsupported signature type: "
						. $signatureType);
				}
				$templateFile= $this -> strReplaceFirst(
					"{{" . $tagData . "}}",
					$signatureString,
					$templateFile);
			}
			else{
				throw new Exception(
					"Unsupported tag operation: "
					. $tagOperation);
			}
		}
		return $templateFile;
	}

	public static function newBuilder(){
		return new ClayTemplateBuilder();
	}


}

class ClayTemplateBuilder{

	//The file path of the template file
	private $templateFilePath;

	//The data to populate the template with
	private $templateData;

	public function __construct(){
		$this -> templateData = array();
	}

	public function setTemplateFilePath($templateFilePath){
		$this -> templateFilePath = $templateFilePath;
		return $this;
	}

	public function setTemplateData($templateData){
		$this -> templateData = $templateData;
		return $this;
	}

	public function addProperty($index, $value){
		$this -> templateData[$index] = $value;
		return $this;
	}

	public function build(){
		return new ClayTemplate(
			$this -> templateFilePath,
			$this -> templateData
		);
	}

}
